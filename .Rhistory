traceback
lm(y~x)
traceback
traceback()
debug(lm)
lm(y~x)
swirl()
swirl
docker build -t tuts .
library(swirl)
swirl()
head(flags)
dim(flags)
vieweinfo()
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flagsÂ£Orange)
sum(flag$Orange)
sum(flags$Orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head()
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
class(shape_mat)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,unique)
sapply(flags,class)
vapply(flags, unique, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, $flagslandmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
?iris
lapply(iris,length)
iris
lapply(iris[,101~150],length)
lapply(iris,length)
?lapply
iris.virginica
class(iris)
iris["virginica"]
iris
iris["species"]
iris["Species"]
iris[,101:150]
iris[101~150,]
iris[101:150,]
lapply(iris[101:150,],length)
class(apply(iris[,1:4],2,mean))
class(colmeans(iris))
class(colMeans(iris))
colMeans(iris)
rowMeans(iris[,1:4])
class(rowMeans(iris[,1:4]))
iris[1,]
iris[1,]
class(apply(iris[,1:4]),1,mean)
class(apply(iris[,1:4]),1,mean))
apply(iris[,1:4]),1,mean)
apply(iris[,1:4],1,mean)
class(apply(iris[,1:4],1,mean))
?rowMeans
?apply
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
mtcars
mtcars
mtcars[1,]
mtcars
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
sapply(mtcars,cyl,mean)
lapply(mtcars,mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
mtcars[1,]
mtcars[,4]
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429 - 82.63636
debug(ls)
ls
debug(ls)
ls
?ls
?debug
ls()
exit()
\
q
?browser
cont
continue
source('~/DataScience/Course2/corr.R')
library(datasets)
data(iris)
?iris
iris[1,]
iris[,1]
iris[101:150,1]
iris[101:150]
iris[101:150,]
mean(iris[101:150,1])
lapply(iris[101:150,1]),mean)
lapply(iris[101:150,1],mean)
mean(iris[101:150,1])
?apply
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
rowMeans(iris[,1:4])
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg,mtcars$cyl)
apply(mtcars,2,mean)
lapply(mtcars,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(mtcars,cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$np,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429  - 82.63636
tapply(mtcars$hp,mtcars$cyl,mean)
source('~/DataScience/Course2/makeVector.R')
getwd
getwd()
?getwd
setwd("/Users/j.wagg/DataScience/")
setwd("/Users/j.wagg/DataScience/Course2/ProgrammingAssignment2/")
source('~/DataScience/Course2/ProgrammingAssignment2/cachematrix.R')
B = matrix(c(1,2,3,4),nrow=2,ncol=2)
makeCasheMatrix(B)
makeCacheMatrix(B)
makeCacheMatrix(B)
makeCacheMatrix()
source('~/DataScience/Course2/makeVector.R')
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
makeVector()
x = c(1,2,3,4)
makeVector(x)
x <- makeVector()
x
x <- makeVector
x
cachemean(x)
cachemean()
v = seq(from 1, to 100, length.out = 100)
v <- seq(from 1, to 100, length.out = 100)
seq(from 1, to 100, length.out = 100)
seq(from = 1, to  =100, length.out = 100)
v <- seq(from = 1, to  =100, length.out = 100)
v
makeVector(v)
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
makeVector(v)
d <- makeVector()
d
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...){
m <- x$getmean()
if(!is.null(m)){
message("getting cahced data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- seq(from = 1, to  =100, length.out = 100)
d <- makeVector()
d
cachemean(v)
cachemean()
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
set(x)
?numeric
d <- makeVector(1)
d
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
debug()
source('~/DataScience/Course2/ProgrammingAssignment2/meanvector.R')
